const webpack = require("webpack");

const {util: {createHash}} = webpack;

const pluginName = 'stable-hash-plugin';
const EXTRACT_CSS = 'css/mini-extract';
const JS = 'javascript/auto';
const DllModule = 'DllModule';
const NormalModule = 'NormalModule';
const CssModule = 'CssModule';

class StableHash {

    apply(compiler) {

        /*compiler.hooks.thisCompilation.tap(pluginName, (compilation) => {
            console.log(compilation);
            compilation.hooks.contentHash.tap(pluginName, (chunk) => {
                const { outputOptions } = compilation;
                const { hashFunction, hashDigest, hashDigestLength } = outputOptions;
                const hash = createHash(hashFunction);

                for (const m of chunk.modulesIterable) {
                    const {type, _source, id,} = m || {};
                    m.updateHash(hash);
                    if (type === EXTRACT_CSS) {
                        console.log(typeof m.source);
                        //区分业务css 模块css

                    } else if (type === JS) {
                        //区分 业务JS 和模块JS
                        //对于dll里面的js，webpack调用了 new FlagAllModulesAsUsedPlugin("DllPlugin")
                        // 把 module.used = true;
                        //    module.usedExports = true; 这两个属性设置为 true
                        console.log(m.used, m.usedExports);

                    }
                }
            });

            compilation.hooks.contentHash.tap("JavascriptModulesPlugin", chunk => {
                for (const m of chunk.modulesIterable) {
                    console.log(m);
                    // if (typeof m.source === "function") {
                    //     hash.update(m.hash);
                    // }
                }
            })
        });*/


        compiler.hooks.emit.tapAsync(pluginName, (compilation, callback) => {
            // 检索每个（构建输出的）chunk：
            compilation.chunks.forEach(chunk => {
                // 检索 chunk 中（内置输入的）的每个模块：
                const {outputOptions} = compilation;
                const {hashSalt, hashFunction, hashDigest, hashDigestLength} = outputOptions;
                // const hash = createHash(hashFunction);

                // const template = chunk.hasRuntime()
                //     ? compilation.mainTemplate
                //     : compilation.chunkTemplate;

                const js = compilation.moduleTemplates.javascript;
                for (const m of chunk.modulesIterable) {
                    // const type = m.constructor.name;

                    if (m._source) {
                        const hash = createHash(hashFunction);
                        if (hashSalt) hash.update(hashSalt);
                        hash.update(m._source._value);
                        const digest = hash.digest(hashDigest);
                        m.hash = digest.substr(0, hashDigestLength);
                        m.renderedHash = digest.substr(0, hashDigestLength);
                    }

                    // console.log(m);
                }

                // 检索由 chunk 生成的每个资源(asset)文件名：
                chunk.files.forEach(filename => {
                    // Get the asset source for each file generated by the chunk:
                    var source = compilation.assets[filename].source();
                    // console.log(source);
                });
            });

            compilation.hooks.buildModule.tap(pluginName, module => {
                // console.log(module);
            })

            callback()
        });
    }


}

module.exports = StableHash;