
const pluginName = 'stable-hash-plugin';
const EXTRACT_CSS = 'css/mini-extract';
const JS = 'javascript/auto';

class MyPlugin {
    apply(compiler) {
        compiler.hooks.thisCompilation.tap(pluginName, (compilation) => {
            console.log(compilation);
            compilation.mainTemplate.hooks.hashForChunk.tap(pluginName, (hash, chunk) => {
                // console.log(hash, chunk);
                const { outputOptions } = compilation;
                const { hashFunction, hashDigest, hashDigestLength } = outputOptions;

                const {_value} = chunk.entryModule._source;

                for (const m of chunk.modulesIterable) {
                    const {type, _source, id,} = m || {};
                    if (type === EXTRACT_CSS) {
                        console.log(typeof m.source);
                        //区分业务css 模块css

                    } else if (type === JS) {
                        //区分 业务JS 和模块JS
                        //对于dll里面的js，webpack调用了 new FlagAllModulesAsUsedPlugin("DllPlugin")
                        // 把 module.used = true;
                        //    module.usedExports = true; 这两个属性设置为 true

                    }
                }
            });
        });


        // compiler.hooks.emit.tapAsync(pluginName, (compilation) => {
        // compiler.hooks.thisCompilation.tap(pluginName, (compilation) => {
        //
        //
        //
        //     // 检索每个（构建输出的）chunk：
        //     compilation.chunks.forEach(chunk => {
        //         // 检索 chunk 中（内置输入的）的每个模块：
        //         // chunk.modules.forEach(module => {
        //         //     // 检索模块中包含的每个源文件路径：
        //         //     module.fileDependencies.forEach(filepath => {
        //         //         // 我们现在已经对源结构有不少了解……
        //         //     });
        //         // });
        //
        //         // 检索由 chunk 生成的每个资源(asset)文件名：
        //         chunk.files.forEach(filename => {
        //             // Get the asset source for each file generated by the chunk:
        //             var source = compilation.assets[filename].source();
        //             console.log(source);
        //         });
        //     });
        //
        //     compilation.hooks.buildModule.tap(pluginName, module => {
        //         console.log(module);
        //     })
        // });
    }


}
module.exports = MyPlugin;